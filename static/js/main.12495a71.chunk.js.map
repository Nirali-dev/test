{"version":3,"sources":["components/contactUs.js","home.js","router/router.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","email","subject","message","handleChange","param","e","setState","target","value","preventDefault","this","templateParams","from_name","to_name","emailjs","resetForm","class","className","Form","onSubmit","handleSubmit","bind","FormGroup","controlId","Label","Input","type","onChange","placeholder","Button","variant","Component","Home","React","Routers","to","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sVAgFeA,E,4MA5EXC,MAAQ,CACJC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,I,EA2BbC,aAAe,SAACC,EAAOC,GACnB,EAAKC,SAAL,eACKF,EAAQC,EAAEE,OAAOC,S,2DA3BbH,GACTA,EAAEI,iBADU,MAE8BC,KAAKZ,MAC3Ca,GAHQ,EAEJZ,KACa,CACjBa,UAJQ,EAEEZ,MAGVa,QAAS,wBACTZ,QANQ,EAESA,QAKjBC,QAPQ,EAEkBA,UAO9BY,OACI,kBACA,mBACAH,EACA,8BAEJD,KAAKK,c,kCAGLL,KAAKJ,SAAS,CACVP,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,O,+BASb,OACI,yBAAKc,MAAM,aACV,wBAAIC,UAAU,cAAd,gBACA,kBAACC,EAAA,EAAD,CAAMC,SAAaT,KAAKU,aAAaC,KAAKX,OACzC,kBAACY,EAAA,EAAD,CAAWC,UAAU,kBACnB,kBAACC,EAAA,EAAD,CAAOP,UAAU,cAAjB,iBACA,kBAACQ,EAAA,EAAD,CACEC,KAAK,QACL3B,KAAK,QACLS,MAAOE,KAAKZ,MAAME,MAClBiB,UAAU,eACVU,SAAUjB,KAAKP,aAAakB,KAAKX,KAAM,SACvCkB,YAAY,iBAGhB,kBAACN,EAAA,EAAD,CAAWC,UAAY,iBACvB,kBAACC,EAAA,EAAD,CAAOP,UAAU,cAAjB,QACA,kBAACQ,EAAA,EAAD,CAAOC,KAAO,OAAO3B,KAAO,OAAOS,MAAUE,KAAKZ,MAAMC,KAAOkB,UAAY,eAAeU,SAAajB,KAAKP,aAAakB,KAAKX,KAAM,QAAUkB,YAAc,UAE5J,kBAACN,EAAA,EAAD,CAAWC,UAAY,oBACtB,kBAACC,EAAA,EAAD,CAAOP,UAAU,cAAjB,WADD,IAC+C,kBAC9CQ,EAAA,EAD8C,CACxCC,KAAO,OACb3B,KAAO,UACPkB,UAAY,eACZT,MAAUE,KAAKZ,MAAMG,QAAU0B,SAAajB,KAAKP,aAAakB,KAAKX,KAAM,WAAakB,YAAc,aAErG,kBAACN,EAAA,EAAD,CAAWC,UAAY,oBACtB,kBAACC,EAAA,EAAD,CAAOP,UAAU,cAAjB,WACA,kBAACQ,EAAA,EAAD,CAAOC,KAAO,WAAW3B,KAAO,UAAUkB,UAAY,eAAeT,MAAUE,KAAKZ,MAAMI,QAAUyB,SAAajB,KAAKP,aAAakB,KAAKX,KAAM,cAE/I,kBAACmB,EAAA,EAAD,CAAQC,QAAU,UAClBJ,KAAO,UADP,gB,GApEYK,aCALC,G,6KAEb,OACI,yBAAKhB,MAAM,aAAY,yC,GAHDiB,IAAMF,YCMnBG,E,uKAEb,OACI,kBAAC,IAAD,KACI,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,iBAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,c,GApBeH,IAAMF,WCC5BM,MANf,WACI,OACI,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrD,c","file":"static/js/main.12495a71.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as emailjs from 'emailjs-com'\nimport { Button, FormFeedback, Form, FormGroup, Label, Input } from 'reactstrap'\nclass ContactForm extends Component {\n    state = {\n        name: '',\n        email: '',\n        subject: '',\n        message: '',\n    }\n    handleSubmit(e) {\n        e.preventDefault()\n        const { name, email, subject, message } = this.state\n        let templateParams = {\n            from_name: email,\n            to_name: 'patoliyanir@gmail.com',\n            subject: subject,\n            message: message,\n        }\n        emailjs.send(\n            'service_jhi6xsn',\n            'template_2bew01j',\n            templateParams,\n            'user_wc2wdqXLFbG7ckl0plcIi'\n        )\n        this.resetForm()\n    }\n    resetForm() {\n        this.setState({\n            name: '',\n            email: '',\n            subject: '',\n            message: '',\n        })\n    }\n    handleChange = (param, e) => {\n        this.setState({\n            [param]: e.target.value\n        })\n    }\n    render() {\n        return (\n            <div class=\"container\">\n\t            <h1 className=\"p-heading1\">Get in Touch</h1> \n\t            <Form onSubmit = { this.handleSubmit.bind(this) } >\n\t\t            <FormGroup controlId=\"formBasicEmail\">\n\t\t              <Label className=\"text-muted\">Email address</Label>\n\t\t              <Input\n\t\t                type=\"email\"\n\t\t                name=\"email\"\n\t\t                value={this.state.email}\n\t\t                className=\"text-primary\"\n\t\t                onChange={this.handleChange.bind(this, 'email')}\n\t\t                placeholder=\"Enter email\"\n\t\t              />\n\t\t            </FormGroup> \n\t            \t<FormGroup controlId = \"formBasicName\" >\n\t            \t<Label className=\"text-muted\">Name</Label>\n\t            \t<Input type = \"text\" name = \"name\" value = { this.state.name } className = \"text-primary\" onChange = { this.handleChange.bind(this, 'name') } placeholder = \"Name\" / >\n\t\t            </FormGroup>   \n\t\t            <FormGroup controlId = \"formBasicSubject\" >\n\t\t\t            <Label className=\"text-muted\">Subject</Label> <\n\t\t\t            Input type = \"text\"\n\t\t\t            name = \"subject\"\n\t\t\t            className = \"text-primary\"\n\t\t\t            value = { this.state.subject } onChange = { this.handleChange.bind(this, 'subject') } placeholder = \"Subject\" / >\n\t\t            </FormGroup>   \n\t\t            <FormGroup controlId = \"formBasicMessage\" >\n\t\t            \t<Label className=\"text-muted\">Message</Label> \n\t\t            \t<Input type = \"textarea\" name = \"message\" className = \"text-primary\" value = { this.state.message } onChange = { this.handleChange.bind(this, 'message') }/>  \n\t\t            </FormGroup >\n\t            \t<Button variant = \"primary\"\n\t\t            type = \"submit\" >\n\t\t            Submit \n\t\t            </Button> \n\t\t        </Form>\n\t        </div>\n        )\n    }\n}\nexport default ContactForm","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class Home extends React.Component {\n    render() {\n        return (\n            <div class=\"col-md-10\"><h1>Home</h1></div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport ContactUs from \"../components/contactUs\";\nimport Home from \"../home.js\";\nexport default class Routers extends React.Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                  <nav>\n                    <ul>\n                      <li>\n                        <Link to=\"/\">Home</Link>\n                      </li>\n                      <li>\n                        <Link to=\"/contactUs\">Contact us</Link>\n                      </li>\n                    </ul>\n                  </nav>\n                  <Switch>\n                    <Route path=\"/contactUs\">\n                      <ContactUs />\n                    </Route>\n                    <Route path=\"/\">\n                      <Home />\n                    </Route>\n                  </Switch>\n                </div>\n            </Router>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Routers from './router/router';\n\nfunction App() {\n    return (\n        <Routers />\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}